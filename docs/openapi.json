{
  "openapi": "3.1.0",
  "info": {
    "title": "Local Operator API",
    "description": "REST API interface for Local Operator agent",
    "version": "0.15.6"
  },
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health Check",
        "description": "Returns the health status of the API server.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful response with version information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_HealthCheckResponse_"
                },
                "example": {
                  "status": 200,
                  "message": "ok",
                  "result": {
                    "version": "0.1.0"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chat": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Process chat request",
        "description": "Accepts a prompt and optional context/configuration, returns the model response and conversation history.",
        "operationId": "chat_endpoint_v1_chat_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              },
              "examples": {
                "example": {
                  "summary": "Example Request",
                  "value": {
                    "prompt": "Print 'Hello, world!'",
                    "hosting": "openrouter",
                    "model": "google/gemini-2.0-flash-001",
                    "context": [],
                    "options": {
                      "temperature": 0.2,
                      "top_p": 0.9
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ChatResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chat/agents/{agent_id}": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Process chat request using a specific agent",
        "description": "Accepts a prompt and optional context/configuration, retrieves the specified agent from the registry, applies it to the operator and executor, and returns the model response and conversation history.",
        "operationId": "chat_with_agent_v1_chat_agents__agent_id__post",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent to use for the chat",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent to use for the chat"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentChatRequest"
              },
              "examples": {
                "example": {
                  "summary": "Example Request with Agent",
                  "value": {
                    "prompt": "How do I implement a binary search in Python?",
                    "hosting": "openrouter",
                    "model": "google/gemini-2.0-flash-001",
                    "options": {
                      "temperature": 0.2,
                      "top_p": 0.9
                    },
                    "persist_conversation": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ChatResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chat/async": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Process chat request asynchronously",
        "description": "Accepts a prompt and optional context/configuration, starts an asynchronous job to process the request and returns a job ID.",
        "operationId": "chat_async_endpoint_v1_chat_async_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              },
              "examples": {
                "example": {
                  "summary": "Example Async Request",
                  "value": {
                    "prompt": "Print 'Hello, world!'",
                    "hosting": "openrouter",
                    "model": "google/gemini-2.0-flash-001",
                    "context": [],
                    "options": {
                      "temperature": 0.2,
                      "top_p": 0.9
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_JobResultSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chat/agents/{agent_id}/async": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Process agent chat request asynchronously",
        "description": "Accepts a prompt and optional context/configuration, retrieves the specified agent from the registry, starts an asynchronous job to process the request and returns a job ID.",
        "operationId": "chat_with_agent_async_v1_chat_agents__agent_id__async_post",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent to use for the chat",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent to use for the chat"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentChatRequest"
              },
              "examples": {
                "example": {
                  "summary": "Example Async Agent Request",
                  "value": {
                    "prompt": "How do I implement a binary search in Python?",
                    "hosting": "openrouter",
                    "model": "google/gemini-2.0-flash-001",
                    "options": {
                      "temperature": 0.2,
                      "top_p": 0.9
                    },
                    "persist_conversation": false,
                    "user_message_id": ""
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_JobResultSchema_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "List agents",
        "description": "Retrieve a paginated list of agents with their details. Optionally filter by agent name and sort by various fields.",
        "operationId": "list_agents_v1_agents_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Number of agents per page",
              "default": 10,
              "title": "Per Page"
            },
            "description": "Number of agents per page"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter agents by name (case-insensitive)",
              "title": "Name"
            },
            "description": "Filter agents by name (case-insensitive)"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort field (name, created_date, last_message_datetime)",
              "default": "last_message_datetime",
              "title": "Sort"
            },
            "description": "Sort field (name, created_date, last_message_datetime)"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort direction (asc, desc)",
              "default": "desc",
              "title": "Direction"
            },
            "description": "Sort direction (asc, desc)"
          }
        ],
        "responses": {
          "200": {
            "description": "Agents list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_AgentListResult_"
                },
                "example": {
                  "status": 200,
                  "message": "Agents retrieved successfully",
                  "result": {
                    "total": 20,
                    "page": 1,
                    "per_page": 10,
                    "agents": [
                      {
                        "id": "agent123",
                        "name": "Example Agent",
                        "created_date": "2024-01-01T00:00:00",
                        "version": "0.2.16",
                        "security_prompt": "Example security prompt",
                        "hosting": "openrouter",
                        "model": "openai/gpt-4o-mini",
                        "description": "An example agent",
                        "last_message": "Hello, how can I help?",
                        "last_message_datetime": "2024-01-01T12:00:00",
                        "temperature": 0.7,
                        "top_p": 1.0,
                        "top_k": 20,
                        "max_tokens": 2048,
                        "frequency_penalty": 0.0,
                        "presence_penalty": 0.0
                      }
                    ]
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Create a new agent",
        "description": "Create a new agent with the provided details.",
        "operationId": "create_agent_v1_agents_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentCreate"
              },
              "examples": {
                "example": {
                  "summary": "Create Agent Example",
                  "value": {
                    "name": "New Agent",
                    "security_prompt": "Example security prompt",
                    "hosting": "openrouter",
                    "model": "openai/gpt-4o-mini",
                    "description": "A helpful assistant"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_Agent_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "201": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "example": {
                  "status": 201,
                  "message": "Agent created successfully",
                  "result": {
                    "id": "agent123",
                    "name": "New Agent",
                    "created_date": "2024-01-01T00:00:00",
                    "version": "0.2.16",
                    "security_prompt": "Example security prompt",
                    "hosting": "openrouter",
                    "model": "openai/gpt-4o-mini",
                    "description": "A helpful assistant",
                    "last_message": "",
                    "last_message_datetime": "2024-01-01T00:00:00"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Retrieve an agent",
        "description": "Retrieve details for an agent by its ID.",
        "operationId": "get_agent_v1_agents__agent_id__get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent to retrieve",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_Agent_"
                },
                "example": {
                  "status": 200,
                  "message": "Agent retrieved successfully",
                  "result": {
                    "id": "agent123",
                    "name": "Example Agent",
                    "created_date": "2024-01-01T00:00:00",
                    "version": "0.2.16",
                    "security_prompt": "Example security prompt",
                    "hosting": "openrouter",
                    "model": "openai/gpt-4o-mini",
                    "description": "An example agent",
                    "last_message": "Hello, how can I help?",
                    "last_message_datetime": "2024-01-01T12:00:00"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "summary": "Update an agent",
        "description": "Update an existing agent with new details. Only provided fields will be updated.",
        "operationId": "update_agent_v1_agents__agent_id__patch",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent to update",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentUpdate"
              },
              "examples": {
                "example": {
                  "summary": "Update Agent Example",
                  "value": {
                    "name": "Updated Agent Name",
                    "security_prompt": "Updated security prompt",
                    "hosting": "openrouter",
                    "model": "openai/gpt-4o-mini",
                    "description": "Updated description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_Agent_"
                },
                "example": {
                  "status": 200,
                  "message": "Agent updated successfully",
                  "result": {
                    "id": "agent123",
                    "name": "Updated Agent Name",
                    "created_date": "2024-01-01T00:00:00",
                    "version": "0.2.16",
                    "security_prompt": "Updated security prompt",
                    "hosting": "openrouter",
                    "model": "openai/gpt-4o-mini",
                    "description": "Updated description",
                    "last_message": "Hello, how can I help?",
                    "last_message_datetime": "2024-01-01T12:00:00"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "summary": "Delete an agent",
        "description": "Delete an existing agent by its ID.",
        "operationId": "delete_agent_v1_agents__agent_id__delete",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent to delete",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse"
                },
                "example": {
                  "status": 200,
                  "message": "Agent deleted successfully",
                  "result": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/upload": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Upload (push) an agent to Radient Agent Hub",
        "description": "Upload (push) the agent with the given ID to the Radient agents marketplace. Requires RADIENT_API_KEY.",
        "operationId": "upload_agent_to_radient_v1_agents__agent_id__upload_post",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent to upload",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent to upload"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent uploaded to Radient successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse"
                },
                "example": {
                  "status": 200,
                  "message": "Agent uploaded to Radient successfully",
                  "result": {
                    "agent_id": "radient-agent-id"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Error uploading agent to Radient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "detail": "RADIENT_API_KEY is required"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/download": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Download (pull) an agent from Radient Agent Hub",
        "description": "Download (pull) an agent from the Radient agents marketplace by agent ID.",
        "operationId": "download_agent_from_radient_v1_agents__agent_id__download_get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent to download from Radient",
              "examples": [
                "radient-agent-id"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent to download from Radient"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent downloaded from Radient successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_Agent_"
                },
                "example": {
                  "status": 200,
                  "message": "Agent downloaded from Radient successfully",
                  "result": {
                    "id": "imported-agent-123",
                    "name": "Imported Agent",
                    "created_date": "2024-01-01T00:00:00",
                    "version": "0.2.16",
                    "security_prompt": "Example security prompt",
                    "hosting": "openrouter",
                    "model": "openai/gpt-4o-mini",
                    "description": "An imported agent",
                    "last_message": "",
                    "last_message_datetime": "2024-01-01T00:00:00"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Error downloading agent from Radient"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/conversation": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get agent conversation history",
        "description": "Retrieve the conversation history for a specific agent.",
        "operationId": "get_agent_conversation_v1_agents__agent_id__conversation_get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent to get conversation for",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent to get conversation for"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number to retrieve",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number to retrieve"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of messages per page",
              "default": 10,
              "title": "Per Page"
            },
            "description": "Number of messages per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent conversation retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_AgentGetConversationResult_"
                },
                "example": {
                  "status": 200,
                  "message": "Agent conversation retrieved successfully",
                  "result": {
                    "agent_id": "agent123",
                    "last_message_datetime": "2023-01-01T12:00:00",
                    "first_message_datetime": "2023-01-01T11:00:00",
                    "messages": [
                      {
                        "role": "system",
                        "content": "You are a helpful assistant",
                        "should_summarize": false,
                        "summarized": false,
                        "timestamp": "2023-01-01T11:00:00"
                      },
                      {
                        "role": "user",
                        "content": "Hello, how are you?",
                        "should_summarize": true,
                        "summarized": false,
                        "timestamp": "2023-01-01T11:00:00"
                      }
                    ],
                    "page": 1,
                    "per_page": 10,
                    "total": 2,
                    "count": 2
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "summary": "Clear agent conversation",
        "description": "Clear the conversation history for a specific agent.",
        "operationId": "clear_agent_conversation_v1_agents__agent_id__conversation_delete",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent to clear conversation for",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent to clear conversation for"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent conversation cleared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse"
                },
                "example": {
                  "status": 200,
                  "message": "Agent conversation cleared successfully",
                  "result": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Agent with ID agent123 not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Error clearing agent conversation"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/import": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Import an agent",
        "description": "Import an agent from a ZIP file containing agent state files with an agent.yml file.",
        "operationId": "import_agent_v1_agents_import_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_import_agent_v1_agents_import_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_Agent_"
                }
              }
            }
          },
          "201": {
            "description": "Agent imported successfully",
            "content": {
              "application/json": {
                "example": {
                  "status": 201,
                  "message": "Agent imported successfully",
                  "result": {
                    "id": "imported-agent-123",
                    "name": "Imported Agent",
                    "created_date": "2024-01-01T00:00:00",
                    "version": "0.2.16",
                    "security_prompt": "Example security prompt",
                    "hosting": "openrouter",
                    "model": "openai/gpt-4o-mini",
                    "description": "An imported agent",
                    "last_message": "",
                    "last_message_datetime": "2024-01-01T00:00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid ZIP file or missing agent.yml"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Error importing agent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/export": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Export an agent",
        "description": "Export an agent's state files as a ZIP file.",
        "operationId": "export_agent_v1_agents__agent_id__export_get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent to export",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent to export"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent exported successfully",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/octet-stream": {}
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Agent with ID agent123 not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Error exporting agent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/history": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get agent execution history",
        "description": "Retrieve the execution history for a specific agent.",
        "operationId": "get_agent_execution_history_v1_agents__agent_id__history_get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent to get execution history for",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent to get execution history for"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number to retrieve",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number to retrieve"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of executions per page",
              "default": 10,
              "title": "Per Page"
            },
            "description": "Number of executions per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent execution history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_AgentExecutionHistoryResult_"
                },
                "example": {
                  "status": 200,
                  "message": "Agent execution history retrieved successfully",
                  "result": {
                    "agent_id": "agent123",
                    "history": [
                      {
                        "code": "print('Hello, world!')",
                        "stdout": "Hello, world!",
                        "stderr": "",
                        "logging": "",
                        "message": "Code executed successfully",
                        "formatted_print": "Hello, world!",
                        "role": "system",
                        "status": "success",
                        "timestamp": "2024-01-01T12:00:00Z",
                        "execution_type": "action",
                        "action": "CODE",
                        "task_classification": "data_science"
                      }
                    ],
                    "first_execution_datetime": "2024-01-01T12:00:00Z",
                    "last_execution_datetime": "2024-01-01T12:00:00Z",
                    "page": 1,
                    "per_page": 10,
                    "total": 1,
                    "count": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Page 2 is out of bounds. Total pages: 1"
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Agent with ID agent123 not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Error retrieving agent execution history"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/system-prompt": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get agent system prompt",
        "description": "Retrieve the system prompt for a specific agent.",
        "operationId": "get_agent_system_prompt_v1_agents__agent_id__system_prompt_get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent system prompt retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse"
                },
                "example": {
                  "status": 200,
                  "message": "Agent system prompt retrieved successfully",
                  "result": {
                    "system_prompt": "You are a helpful assistant..."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Agent with ID agent123 not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Error retrieving agent system prompt"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agents"
        ],
        "summary": "Update agent system prompt",
        "description": "Update the system prompt for a specific agent.",
        "operationId": "update_agent_system_prompt_v1_agents__agent_id__system_prompt_put",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent",
              "examples": [
                "agent123"
              ],
              "title": "Agent Id"
            },
            "description": "ID of the agent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "title": "System Prompt"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent system prompt updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse"
                },
                "example": {
                  "status": 200,
                  "message": "Agent system prompt updated successfully",
                  "result": {}
                }
              }
            }
          },
          "404": {
            "description": "Agent not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Agent with ID agent123 not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Error updating agent system prompt"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/execution-variables": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "List agent execution variables",
        "description": "Retrieve all execution variables for a specific agent.",
        "operationId": "list_agent_execution_variables_v1_agents__agent_id__execution_variables_get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent",
              "title": "Agent Id"
            },
            "description": "ID of the agent"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ExecutionVariablesResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Create an agent execution variable",
        "description": "Create a new execution variable for a specific agent.",
        "operationId": "create_agent_execution_variable_v1_agents__agent_id__execution_variables_post",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent",
              "title": "Agent Id"
            },
            "description": "ID of the agent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionVariable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ExecutionVariable_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/execution-variables/{variable_key}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "Get an agent execution variable",
        "description": "Retrieve a specific execution variable for an agent by its key.",
        "operationId": "get_agent_execution_variable_v1_agents__agent_id__execution_variables__variable_key__get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent",
              "title": "Agent Id"
            },
            "description": "ID of the agent"
          },
          {
            "name": "variable_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the execution variable",
              "title": "Variable Key"
            },
            "description": "Key of the execution variable"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ExecutionVariable_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "summary": "Update an agent execution variable",
        "description": "Update an existing execution variable for a specific agent.",
        "operationId": "update_agent_execution_variable_v1_agents__agent_id__execution_variables__variable_key__patch",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent",
              "title": "Agent Id"
            },
            "description": "ID of the agent"
          },
          {
            "name": "variable_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the execution variable to update",
              "title": "Variable Key"
            },
            "description": "Key of the execution variable to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionVariable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ExecutionVariable_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "summary": "Delete an agent execution variable",
        "description": "Delete an execution variable for a specific agent by its key.",
        "operationId": "delete_agent_execution_variable_v1_agents__agent_id__execution_variables__variable_key__delete",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the agent",
              "title": "Agent Id"
            },
            "description": "ID of the agent"
          },
          {
            "name": "variable_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the execution variable to delete",
              "title": "Variable Key"
            },
            "description": "Key of the execution variable to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/jobs/{job_id}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get job status",
        "description": "Retrieves the status and result of an asynchronous job.",
        "operationId": "get_job_status_v1_jobs__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the chat job to retrieve",
              "title": "Job Id"
            },
            "description": "The ID of the chat job to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Job status and result retrieved successfully",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "status": 200,
                  "message": "Job status retrieved",
                  "result": {
                    "id": "job-123456",
                    "agent_id": "test-agent",
                    "status": "completed",
                    "prompt": "Test prompt",
                    "model": "gpt-4",
                    "hosting": "openai",
                    "created_at": "2023-01-01T12:00:00Z",
                    "started_at": "2023-01-01T12:00:05Z",
                    "completed_at": "2023-01-01T12:00:15Z",
                    "result": {
                      "response": "Test response",
                      "context": [
                        {
                          "role": "user",
                          "content": "Test prompt"
                        }
                      ],
                      "stats": {
                        "total_tokens": 100
                      }
                    },
                    "current_execution": {
                      "id": "execution-123456",
                      "stdout": "Hello, world!",
                      "stderr": "",
                      "logging": "",
                      "message": "Code executed successfully",
                      "code": "print('Hello, world!')",
                      "formatted_print": "Hello, world!",
                      "role": "assistant",
                      "status": "success",
                      "timestamp": "2023-01-01T12:00:05Z",
                      "files": [],
                      "action": "CODE",
                      "execution_type": "action",
                      "task_classification": "software_development"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Job not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Job with ID \"job-123456\" not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Jobs"
        ],
        "summary": "Cancel job",
        "description": "Cancels a running or pending job.",
        "operationId": "cancel_job_v1_jobs__job_id__delete",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the job to cancel",
              "title": "Job Id"
            },
            "description": "The ID of the job to cancel"
          }
        ],
        "responses": {
          "200": {
            "description": "Job cancelled successfully",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "status": 200,
                  "message": "Job job-123456 cancelled successfully"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "400": {
            "description": "Job cannot be cancelled",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Job job-123456 cannot be cancelled (already completed or failed)"
                }
              }
            }
          },
          "404": {
            "description": "Job not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Job with ID \"job-123456\" not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "List jobs",
        "description": "Lists all jobs, optionally filtered by agent ID and/or status.",
        "operationId": "list_jobs_v1_jobs_get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter jobs by agent ID",
              "title": "Agent Id"
            },
            "description": "Filter jobs by agent ID"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/JobStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter jobs by status",
              "title": "Status"
            },
            "description": "Filter jobs by status"
          },
          {
            "name": "agent_id",
            "in": "query",
            "description": "Filter jobs by agent ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter jobs by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "completed",
                "failed",
                "cancelled"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs matching the filter criteria",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "status": 200,
                  "message": "Jobs retrieved successfully",
                  "result": {
                    "jobs": [
                      {
                        "id": "job-123456",
                        "agent_id": "test-agent",
                        "status": "completed",
                        "prompt": "Test prompt",
                        "model": "gpt-4",
                        "hosting": "openai",
                        "created_at": "2023-01-01T12:00:00Z",
                        "started_at": "2023-01-01T12:00:05Z",
                        "completed_at": "2023-01-01T12:00:15Z"
                      }
                    ],
                    "count": 1
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/jobs/cleanup": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Cleanup old jobs",
        "description": "Removes jobs older than the specified age.",
        "operationId": "cleanup_jobs_v1_jobs_cleanup_post",
        "parameters": [
          {
            "name": "max_age_hours",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum age of jobs to keep in hours",
              "default": 24,
              "title": "Max Age Hours"
            },
            "description": "Maximum age of jobs to keep in hours"
          },
          {
            "name": "max_age_hours",
            "in": "query",
            "description": "Maximum age of jobs to keep in hours",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 24
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Jobs cleaned up successfully",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "status": 200,
                  "message": "Cleanup completed successfully",
                  "result": {
                    "removed_count": 5
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get configuration",
        "description": "Retrieve the current configuration settings.",
        "operationId": "get_config_v1_config_get",
        "responses": {
          "200": {
            "description": "Configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ConfigResponse_"
                },
                "example": {
                  "status": 200,
                  "message": "Configuration retrieved successfully",
                  "result": {
                    "version": "0.2.16",
                    "metadata": {
                      "created_at": "2024-01-01T00:00:00",
                      "last_modified": "2024-01-01T12:00:00",
                      "description": "Local Operator configuration file"
                    },
                    "values": {
                      "conversation_length": 100,
                      "detail_length": 15,
                      "max_learnings_history": 50,
                      "hosting": "openrouter",
                      "model_name": "openai/gpt-4o-mini",
                      "auto_save_conversation": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update configuration",
        "description": "Update the configuration settings with new values.",
        "operationId": "update_config_v1_config_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigUpdate"
              },
              "examples": {
                "example": {
                  "summary": "Update Configuration Example",
                  "value": {
                    "conversation_length": 150,
                    "detail_length": 50,
                    "hosting": "openrouter",
                    "model_name": "openai/gpt-4o-mini",
                    "auto_save_conversation": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ConfigResponse_"
                },
                "example": {
                  "status": 200,
                  "message": "Configuration updated successfully",
                  "result": {
                    "version": "0.2.16",
                    "metadata": {
                      "created_at": "2024-01-01T00:00:00",
                      "last_modified": "2024-01-01T12:00:00",
                      "description": "Local Operator configuration file"
                    },
                    "values": {
                      "conversation_length": 150,
                      "detail_length": 50,
                      "max_learnings_history": 50,
                      "hosting": "openrouter",
                      "model_name": "openai/gpt-4o-mini",
                      "auto_save_conversation": true
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/system-prompt": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get system prompt",
        "description": "Retrieve the current system prompt content.",
        "operationId": "get_system_prompt_v1_config_system_prompt_get",
        "responses": {
          "200": {
            "description": "System prompt retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_SystemPromptResponse_"
                },
                "example": {
                  "status": 200,
                  "message": "System prompt retrieved successfully",
                  "result": {
                    "content": "You are Local Operator, an AI assistant...",
                    "last_modified": "2024-01-01T12:00:00"
                  }
                }
              }
            }
          },
          "204": {
            "description": "System prompt file does not exist",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "System prompt file not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "System prompt file not found"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update system prompt",
        "description": "Update the system prompt content.",
        "operationId": "update_system_prompt_v1_config_system_prompt_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemPromptUpdate"
              },
              "examples": {
                "example": {
                  "summary": "Update System Prompt Example",
                  "value": {
                    "content": "You are Local Operator, an AI assistant..."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "System prompt updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_SystemPromptResponse_"
                },
                "example": {
                  "status": 200,
                  "message": "System prompt updated successfully",
                  "result": {
                    "content": "You are Local Operator, an AI assistant...",
                    "last_modified": "2024-01-01T12:00:00"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/credentials": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "List credentials",
        "description": "Retrieve a list of credential keys (without their values).",
        "operationId": "list_credentials_v1_credentials_get",
        "responses": {
          "200": {
            "description": "Credentials list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_CredentialListResult_"
                },
                "example": {
                  "status": 200,
                  "message": "Credentials retrieved successfully",
                  "result": {
                    "keys": [
                      "OPENAI_API_KEY",
                      "SERPAPI_API_KEY",
                      "TAVILY_API_KEY"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Credentials"
        ],
        "summary": "Update a credential",
        "description": "Update an existing credential or create a new one with the provided key and value.",
        "operationId": "update_credential_v1_credentials_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialUpdate"
              },
              "examples": {
                "example": {
                  "summary": "Update Credential Example",
                  "value": {
                    "key": "OPENAI_API_KEY",
                    "value": "sk-abcdefghijklmnopqrstuvwxyz"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Credential updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse"
                },
                "example": {
                  "status": 200,
                  "message": "Credential updated successfully",
                  "result": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/models/providers": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List model providers",
        "description": "Returns a list of available model providers supported by the Local Operator API.",
        "operationId": "list_providers_v1_models_providers_get",
        "responses": {
          "200": {
            "description": "List of providers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ProviderListResponse_"
                },
                "example": {
                  "status": 200,
                  "message": "Providers retrieved successfully",
                  "result": {
                    "providers": [
                      {
                        "id": "openai",
                        "name": "OpenAI",
                        "description": "OpenAI's API provides access to GPT-4o",
                        "url": "https://platform.openai.com/",
                        "requiredCredentials": [
                          "OPENAI_API_KEY"
                        ]
                      },
                      {
                        "id": "anthropic",
                        "name": "Anthropic",
                        "description": "Anthropic's Claude models for AI assistants",
                        "url": "https://www.anthropic.com/",
                        "requiredCredentials": [
                          "ANTHROPIC_API_KEY"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/models": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List all available models",
        "description": "Returns a list of all available models from all providers, including OpenRouter models if API key is configured. Optionally filter by provider and sort by field.",
        "operationId": "list_models_v1_models_get",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Provider"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ModelListQuerySort"
                },
                {
                  "type": "null"
                }
              ],
              "default": "recommended",
              "title": "Sort"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "ascending",
              "title": "Direction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of models retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ModelListResponse_"
                },
                "example": {
                  "status": 200,
                  "message": "Models retrieved successfully",
                  "result": {
                    "models": [
                      {
                        "id": "claude-3-opus-20240229",
                        "provider": "anthropic",
                        "info": {
                          "input_price": 15.0,
                          "output_price": 75.0,
                          "max_tokens": 200000,
                          "context_window": 200000,
                          "supports_images": true,
                          "supports_prompt_cache": false,
                          "description": "Most powerful Claude model for highly complex tasks",
                          "recommended": false
                        }
                      },
                      {
                        "id": "gpt-4o",
                        "name": "GPT-4o",
                        "provider": "openrouter",
                        "info": {
                          "input_price": 5.0,
                          "output_price": 15.0,
                          "supports_prompt_cache": false,
                          "description": "OpenAI's most advanced multimodal model",
                          "recommended": true
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Provider not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Provider not found: invalid"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/static/images": {
      "get": {
        "tags": [
          "Static"
        ],
        "summary": "Serve image file",
        "description": "Serves an image file from disk by path. Only image file types are allowed.",
        "operationId": "get_image_v1_static_images_get",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Path to the image file on disk",
              "title": "Path"
            },
            "description": "Path to the image file on disk"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/static/videos": {
      "get": {
        "tags": [
          "Static"
        ],
        "summary": "Serve video file",
        "description": "Serves a video file from disk by path. Only video file types are allowed.",
        "operationId": "get_video_v1_static_videos_get",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Path to the video file on disk",
              "title": "Path"
            },
            "description": "Path to the video file on disk"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/static/html": {
      "get": {
        "tags": [
          "Static"
        ],
        "summary": "Serve HTML file",
        "description": "Serves an HTML file from disk by path. Only HTML file types are allowed.",
        "operationId": "get_html_v1_static_html_get",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Path to the HTML file on disk",
              "title": "Path"
            },
            "description": "Path to the HTML file on disk"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/schedules": {
      "post": {
        "tags": [
          "Schedules"
        ],
        "summary": "Create a new schedule for an agent",
        "description": "Create a new schedule for a specific agent.",
        "operationId": "create_schedule_for_agent_v1_agents__agent_id__schedules_post",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Agent Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ScheduleResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "List schedules for a specific agent",
        "description": "Retrieve a paginated list of schedules for a specific agent.",
        "operationId": "list_schedules_for_agent_v1_agents__agent_id__schedules_get",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Agent Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of schedules per page",
              "default": 10,
              "title": "Per Page"
            },
            "description": "Number of schedules per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ScheduleListResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/schedules": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "List all schedules",
        "description": "Retrieve a paginated list of all schedules across all agents.",
        "operationId": "list_all_schedules_v1_schedules_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of schedules per page",
              "default": 10,
              "title": "Per Page"
            },
            "description": "Number of schedules per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ScheduleListResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/schedules/{schedule_id}": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Get a single schedule by ID",
        "description": "Retrieve a single schedule by its ID.",
        "operationId": "get_schedule_by_id_v1_schedules__schedule_id__get",
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Schedule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ScheduleResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Schedules"
        ],
        "summary": "Edit an existing schedule",
        "description": "Edit an existing schedule by its ID.",
        "operationId": "edit_schedule_v1_schedules__schedule_id__patch",
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Schedule Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_ScheduleResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Schedules"
        ],
        "summary": "Remove a schedule by ID",
        "description": "Remove a schedule by its ID.",
        "operationId": "remove_schedule_v1_schedules__schedule_id__delete",
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Schedule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/transcriptions": {
      "post": {
        "tags": [
          "Transcription"
        ],
        "summary": "Transcribe Audio File",
        "description": "Transcribe an audio file using the specified model and parameters.\n\nThe audio file is sent as `multipart/form-data`.",
        "operationId": "create_transcription_endpoint_v1_transcriptions_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_transcription_endpoint_v1_transcriptions_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CRUDResponse_RadientTranscriptionResponseData_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tools/speech": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "Generate speech from text",
        "description": "Generates speech from text using a specified provider and returns the audio data. This endpoint is protected by API key authentication and is subject to billing.",
        "operationId": "create_speech_v1_tools_speech_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpeechRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful speech generation",
            "content": {
              "application/json": {
                "schema": {}
              },
              "audio/mpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, such as missing required fields"
          },
          "500": {
            "description": "Internal server error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/speech": {
      "post": {
        "tags": [
          "Tools"
        ],
        "summary": "Generate speech from an agent's last message",
        "description": "Generates speech from an agent's last message, automatically determining the voice and instructions based on the agent's profile.",
        "operationId": "create_agent_speech_v1_agents__agent_id__speech_post",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgentSpeechRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful speech generation",
            "content": {
              "application/json": {
                "schema": {}
              },
              "audio/mpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Agent not found"
          },
          "500": {
            "description": "Internal server error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionType": {
        "type": "string",
        "enum": [
          "CODE",
          "WRITE",
          "EDIT",
          "READ",
          "DELEGATE",
          "DONE",
          "ASK",
          "BYE"
        ],
        "title": "ActionType",
        "description": "Enum representing the different types of actions that can be taken in a conversation.\n\nUsed to track the type of action being taken in a conversation."
      },
      "Agent": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the agent"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Agent's name"
          },
          "created_date": {
            "type": "string",
            "format": "date-time",
            "title": "Created Date",
            "description": "The date when the agent was created"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "The version of the agent"
          },
          "security_prompt": {
            "type": "string",
            "title": "Security Prompt",
            "description": "The security prompt for the agent. Allows a user to explicitly specify the security context for the agent's code security checks.",
            "default": ""
          },
          "hosting": {
            "type": "string",
            "title": "Hosting",
            "description": "The hosting environment for the agent. Defaults to ''.",
            "default": ""
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model to use for the agent. Defaults to ''.",
            "default": ""
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "A description of the agent. Defaults to ''.",
            "default": ""
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "Tags for the agent. Defaults to an empty list."
          },
          "categories": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Categories",
            "description": "Categories for the agent. Defaults to an empty list."
          },
          "last_message": {
            "type": "string",
            "title": "Last Message",
            "description": "The last message sent to the agent. Defaults to ''.",
            "default": ""
          },
          "last_message_datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Last Message Datetime",
            "description": "The date and time of the last message sent to the agent."
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Controls randomness in responses. Higher values like 0.8 make output more random, while lower values like 0.2 make it more focused and deterministic."
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Controls cumulative probability of tokens to sample from. Higher values (0.95) keep more options, lower values (0.1) are more selective."
          },
          "top_k": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K",
            "description": "Limits tokens to sample from at each step. Lower values (10) are more selective, higher values (100) allow more variety."
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "Maximum tokens to generate. Model may generate fewer if response completes before reaching limit."
          },
          "stop": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop",
            "description": "List of strings that will stop generation when encountered."
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "description": "Reduces repetition by lowering likelihood of repeated tokens. Range from -2.0 to 2.0."
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty",
            "description": "Increases diversity by lowering likelihood of prompt tokens. Range from -2.0 to 2.0."
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed",
            "description": "Random number seed for deterministic generation."
          },
          "current_working_directory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Working Directory",
            "description": "The current working directory for the agent.  Updated whenever the agent changes its working directory through code execution.  Defaults to '.'",
            "default": "."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "created_date",
          "version",
          "last_message_datetime"
        ],
        "title": "Agent",
        "description": "Representation of an Agent."
      },
      "AgentChatRequest": {
        "properties": {
          "hosting": {
            "type": "string",
            "title": "Hosting"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "default": false
          },
          "options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatOptions"
              },
              {
                "type": "null"
              }
            ]
          },
          "persist_conversation": {
            "type": "boolean",
            "title": "Persist Conversation",
            "default": false
          },
          "user_message_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Message Id"
          },
          "attachments": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attachments"
          }
        },
        "type": "object",
        "required": [
          "hosting",
          "model",
          "prompt"
        ],
        "title": "AgentChatRequest",
        "description": "Request body for chat generation endpoint.\n\nAttributes:\n    hosting: Name of the hosting service to use for generation\n    model: Name of the model to use for generation\n    prompt: The prompt to generate a response for\n    stream: Whether to stream the response token by token. Default: False\n    options: Optional generation parameters to override defaults\n    persist_conversation: Whether to persist the conversation history by\n    continuously updating the agent's conversation history with each new message.\n    Default: False\n    user_message_id: Optional ID of the user message to assign to the first user message\n        in the conversation.  This is used by the UI to prevent duplicate user\n        messages after the initial render.\n    attachments: Optional list of file paths (local or remote) to be used in the analysis.\n        These files are expected to be publicly accessible."
      },
      "AgentCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Agent's name"
          },
          "security_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Prompt",
            "description": "The security prompt for the agent. Allows a user to explicitly specify the security context for the agent's code security checks."
          },
          "hosting": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hosting",
            "description": "The hosting environment for the agent. Defaults to 'openrouter'."
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "The model to use for the agent. Defaults to 'openai/gpt-4o-mini'."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A description of the agent. Defaults to ''."
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Controls randomness in responses. Higher values like 0.8 make output more random, while lower values like 0.2 make it more focused and deterministic."
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Controls cumulative probability of tokens to sample from. Higher values (0.95) keep more options, lower values (0.1) are more selective."
          },
          "top_k": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K",
            "description": "Limits tokens to sample from at each step. Lower values (10) are more selective, higher values (100) allow more variety."
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "Maximum tokens to generate. Model may generate fewer if response completes before reaching limit."
          },
          "stop": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop",
            "description": "List of strings that will stop generation when encountered."
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "description": "Reduces repetition by lowering likelihood of repeated tokens. Range from -2.0 to 2.0."
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty",
            "description": "Increases diversity by lowering likelihood of prompt tokens. Range from -2.0 to 2.0."
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed",
            "description": "Random number seed for deterministic generation."
          },
          "current_working_directory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Working Directory",
            "description": "The current working directory for the agent.  Updated whenever the agent changes its working directory through code execution.  Defaults to '~/local-operator-home'.",
            "default": "~/local-operator-home"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "AgentCreate",
        "description": "Data required to create a new agent."
      },
      "AgentExecutionHistoryResult": {
        "properties": {
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "ID of the agent involved in the execution history"
          },
          "history": {
            "items": {
              "$ref": "#/components/schemas/CodeExecutionResult"
            },
            "type": "array",
            "title": "History",
            "description": "List of code execution results"
          },
          "last_execution_datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Last Execution Datetime",
            "description": "Date of the last execution in the history"
          },
          "first_execution_datetime": {
            "type": "string",
            "format": "date-time",
            "title": "First Execution Datetime",
            "description": "Date of the first execution in the history"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Number of messages per page"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of messages in the execution history"
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "Number of messages in the current page"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "history",
          "last_execution_datetime",
          "first_execution_datetime",
          "page",
          "per_page",
          "total",
          "count"
        ],
        "title": "AgentExecutionHistoryResult",
        "description": "Schema for getting an agent execution history."
      },
      "AgentGetConversationResult": {
        "properties": {
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "ID of the agent involved in the conversation"
          },
          "last_message_datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Last Message Datetime",
            "description": "Date of the last message in the conversation"
          },
          "first_message_datetime": {
            "type": "string",
            "format": "date-time",
            "title": "First Message Datetime",
            "description": "Date of the first message in the conversation"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ConversationRecord"
            },
            "type": "array",
            "title": "Messages",
            "description": "List of messages in the conversation"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Number of messages per page"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of messages in the conversation"
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "Number of messages in the current page"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "last_message_datetime",
          "first_message_datetime",
          "page",
          "per_page",
          "total",
          "count"
        ],
        "title": "AgentGetConversationResult",
        "description": "Schema for getting an agent conversation."
      },
      "AgentListResult": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of agents"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number"
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Number of agents per page"
          },
          "agents": {
            "items": {
              "$ref": "#/components/schemas/Agent"
            },
            "type": "array",
            "title": "Agents",
            "description": "List of agents"
          }
        },
        "type": "object",
        "required": [
          "total",
          "page",
          "per_page",
          "agents"
        ],
        "title": "AgentListResult",
        "description": "Paginated list result for agents."
      },
      "AgentSpeechRequest": {
        "properties": {
          "response_format": {
            "type": "string",
            "title": "Response Format",
            "description": "The format of the audio response. Default: \"mp3\".",
            "default": "mp3"
          }
        },
        "type": "object",
        "title": "AgentSpeechRequest",
        "description": "Request body for agent-based speech generation endpoint.\n\nAttributes:\n    agent: The name of the agent to use for generating speech.\n    response_format: The format of the audio response. Default: \"mp3\"."
      },
      "AgentUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Agent's name"
          },
          "security_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Prompt",
            "description": "The security prompt for the agent. Allows a user to explicitly specify the security context for the agent's code security checks."
          },
          "hosting": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hosting",
            "description": "The hosting environment for the agent. Defaults to 'openrouter'."
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "The model to use for the agent. Defaults to 'google/gemini-2.0-flash-001'."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A description of the agent.  Defaults to ''."
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "Tags for the agent.  Defaults to an empty list."
          },
          "categories": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Categories",
            "description": "Categories for the agent.  Defaults to an empty list."
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "description": "Controls randomness in responses. Higher values like 0.8 make output more random, while lower values like 0.2 make it more focused and deterministic."
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Controls cumulative probability of tokens to sample from. Higher values (0.95) keep more options, lower values (0.1) are more selective."
          },
          "top_k": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K",
            "description": "Limits tokens to sample from at each step. Lower values (10) are more selective, higher values (100) allow more variety."
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens",
            "description": "Maximum tokens to generate. Model may generate fewer if response completes before reaching limit."
          },
          "stop": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop",
            "description": "List of strings that will stop generation when encountered."
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "description": "Reduces repetition by lowering likelihood of repeated tokens. Range from -2.0 to 2.0."
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty",
            "description": "Increases diversity by lowering likelihood of prompt tokens. Range from -2.0 to 2.0."
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed",
            "description": "Random number seed for deterministic generation."
          },
          "current_working_directory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Working Directory",
            "description": "The current working directory for the agent.  Updated whenever the agent changes its working directory through code execution."
          }
        },
        "type": "object",
        "title": "AgentUpdate",
        "description": "Data for updating an existing agent."
      },
      "Body_create_transcription_endpoint_v1_transcriptions_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "default": "gpt-4o-transcribe"
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt"
          },
          "response_format": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Format",
            "default": "json"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "default": 0.0
          },
          "language": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Language"
          },
          "provider": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Provider",
            "default": "openai"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_create_transcription_endpoint_v1_transcriptions_post"
      },
      "Body_import_agent_v1_agents_import_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "ZIP file containing agent state files"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_import_agent_v1_agents_import_post"
      },
      "CRUDResponse": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Result"
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse",
        "description": "Standard response schema for CRUD operations.\n\nAttributes:\n    status: HTTP status code\n    message: Outcome message of the operation\n    result: The resulting data, which can be an object, paginated list, or empty."
      },
      "CRUDResponse_AgentExecutionHistoryResult_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentExecutionHistoryResult"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[AgentExecutionHistoryResult]"
      },
      "CRUDResponse_AgentGetConversationResult_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentGetConversationResult"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[AgentGetConversationResult]"
      },
      "CRUDResponse_AgentListResult_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentListResult"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[AgentListResult]"
      },
      "CRUDResponse_Agent_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Agent"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[Agent]"
      },
      "CRUDResponse_ChatResponse_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[ChatResponse]"
      },
      "CRUDResponse_ConfigResponse_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ConfigResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[ConfigResponse]"
      },
      "CRUDResponse_CredentialListResult_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CredentialListResult"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[CredentialListResult]"
      },
      "CRUDResponse_ExecutionVariable_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExecutionVariable"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[ExecutionVariable]"
      },
      "CRUDResponse_ExecutionVariablesResponse_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExecutionVariablesResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[ExecutionVariablesResponse]"
      },
      "CRUDResponse_HealthCheckResponse_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HealthCheckResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[HealthCheckResponse]"
      },
      "CRUDResponse_JobResultSchema_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/JobResultSchema"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[JobResultSchema]"
      },
      "CRUDResponse_ModelListResponse_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelListResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[ModelListResponse]"
      },
      "CRUDResponse_ProviderListResponse_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProviderListResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[ProviderListResponse]"
      },
      "CRUDResponse_RadientTranscriptionResponseData_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RadientTranscriptionResponseData"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[RadientTranscriptionResponseData]"
      },
      "CRUDResponse_ScheduleListResponse_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ScheduleListResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[ScheduleListResponse]"
      },
      "CRUDResponse_ScheduleResponse_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ScheduleResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[ScheduleResponse]"
      },
      "CRUDResponse_SystemPromptResponse_": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SystemPromptResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "title": "CRUDResponse[SystemPromptResponse]"
      },
      "ChatOptions": {
        "properties": {
          "temperature": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature"
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P"
          },
          "top_k": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens"
          },
          "stop": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop"
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty"
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty"
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed"
          }
        },
        "type": "object",
        "title": "ChatOptions",
        "description": "Options for controlling the chat generation.\n\nAttributes:\n    temperature: Controls randomness in responses. Higher values like 0.8 make output more\n        random, while lower values like 0.2 make it more focused and deterministic.\n        Default: 0.8\n    top_p: Controls cumulative probability of tokens to sample from. Higher values (0.95) keep\n        more options, lower values (0.1) are more selective. Default: 0.9\n    top_k: Limits tokens to sample from at each step. Lower values (10) are more selective,\n        higher values (100) allow more variety. Default: 40\n    max_tokens: Maximum tokens to generate. Model may generate fewer if response completes\n        before reaching limit. Default: 4096\n    stop: List of strings that will stop generation when encountered. Default: None\n    frequency_penalty: Reduces repetition by lowering likelihood of repeated tokens.\n        Range from -2.0 to 2.0. Default: 0.0\n    presence_penalty: Increases diversity by lowering likelihood of prompt tokens.\n        Range from -2.0 to 2.0. Default: 0.0\n    seed: Random number seed for deterministic generation. Default: None"
      },
      "ChatRequest": {
        "properties": {
          "hosting": {
            "type": "string",
            "title": "Hosting"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "default": false
          },
          "context": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ConversationRecord"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context"
          },
          "options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ChatOptions"
              },
              {
                "type": "null"
              }
            ]
          },
          "attachments": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attachments"
          }
        },
        "type": "object",
        "required": [
          "hosting",
          "model",
          "prompt"
        ],
        "title": "ChatRequest",
        "description": "Request body for chat generation endpoint.\n\nAttributes:\n    hosting: Name of the hosting service to use for generation\n    model: Name of the model to use for generation\n    prompt: The prompt to generate a response for\n    stream: Whether to stream the response token by token. Default: False\n    context: Optional list of previous messages for context\n    options: Optional generation parameters to override defaults\n    attachments: Optional list of file paths (local or remote) to be used in the analysis.\n        These files are expected to be publicly accessible."
      },
      "ChatResponse": {
        "properties": {
          "response": {
            "type": "string",
            "title": "Response"
          },
          "context": {
            "items": {
              "$ref": "#/components/schemas/ConversationRecord"
            },
            "type": "array",
            "title": "Context"
          },
          "stats": {
            "$ref": "#/components/schemas/ChatStats"
          }
        },
        "type": "object",
        "required": [
          "response",
          "context",
          "stats"
        ],
        "title": "ChatResponse",
        "description": "Response from chat generation endpoint.\n\nAttributes:\n    response: The generated text response\n    context: List of all messages including the new response\n    stats: Token usage statistics"
      },
      "ChatStats": {
        "properties": {
          "total_tokens": {
            "type": "integer",
            "title": "Total Tokens"
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt Tokens"
          },
          "completion_tokens": {
            "type": "integer",
            "title": "Completion Tokens"
          }
        },
        "type": "object",
        "required": [
          "total_tokens",
          "prompt_tokens",
          "completion_tokens"
        ],
        "title": "ChatStats",
        "description": "Statistics about token usage for the chat request.\n\nAttributes:\n    total_tokens: Total number of tokens used in prompt and completion\n    prompt_tokens: Number of tokens in the prompt\n    completion_tokens: Number of tokens in the completion"
      },
      "CodeExecutionResult": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "stdout": {
            "type": "string",
            "title": "Stdout",
            "default": ""
          },
          "stderr": {
            "type": "string",
            "title": "Stderr",
            "default": ""
          },
          "logging": {
            "type": "string",
            "title": "Logging",
            "default": ""
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": ""
          },
          "code": {
            "type": "string",
            "title": "Code",
            "default": ""
          },
          "content": {
            "type": "string",
            "title": "Content",
            "default": ""
          },
          "file_path": {
            "type": "string",
            "title": "File Path",
            "default": ""
          },
          "replacements": {
            "type": "string",
            "title": "Replacements",
            "default": ""
          },
          "agent": {
            "type": "string",
            "title": "Agent",
            "default": ""
          },
          "learnings": {
            "type": "string",
            "title": "Learnings",
            "default": ""
          },
          "formatted_print": {
            "type": "string",
            "title": "Formatted Print",
            "default": ""
          },
          "role": {
            "$ref": "#/components/schemas/ConversationRole",
            "default": "assistant"
          },
          "status": {
            "$ref": "#/components/schemas/ProcessResponseStatus",
            "default": "none"
          },
          "timestamp": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timestamp"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Files"
          },
          "action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ActionType"
              },
              {
                "type": "null"
              }
            ]
          },
          "execution_type": {
            "$ref": "#/components/schemas/ExecutionType",
            "default": "none"
          },
          "task_classification": {
            "type": "string",
            "title": "Task Classification",
            "default": ""
          },
          "is_complete": {
            "type": "boolean",
            "title": "Is Complete",
            "default": false
          },
          "is_streamable": {
            "type": "boolean",
            "title": "Is Streamable",
            "default": false
          },
          "thinking": {
            "type": "string",
            "title": "Thinking",
            "default": ""
          }
        },
        "type": "object",
        "title": "CodeExecutionResult",
        "description": "Represents the result of a code execution.\n\nAttributes:\n    id (str): The unique identifier for the code execution\n    stdout (str): The standard output from the code execution.\n    stderr (str): The standard error from the code execution.\n    logging (str): Any logging output generated during the code execution.\n    message (str): The message to display to the user about the code execution.\n    code (str): The code that was executed.\n    content (str): The content to display to the user for WRITE actions.\n    formatted_print (str): The formatted print output from the code execution.\n    role (ConversationRole): The role of the message sender (user/assistant/system)\n    status (ProcessResponseStatus): The status of the code execution\n    timestamp (datetime): The timestamp of the code execution\n    files (List[str]): The files that were created or modified during the code execution\n    action (ActionType): The action that was taken during the code execution\n    execution_type (ExecutionType): The type of execution that was performed\n    task_classification (str): The classification of the task that was performed\n    is_complete (bool): Whether the execution is complete\n    is_streamable (bool): Whether the result can be streamed\n    learnings (str): Learnings extracted from the execution"
      },
      "ConfigResponse": {
        "properties": {
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Configuration schema version for compatibility"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata about the configuration"
          },
          "values": {
            "type": "object",
            "title": "Values",
            "description": "Configuration settings"
          }
        },
        "type": "object",
        "required": [
          "version",
          "metadata",
          "values"
        ],
        "title": "ConfigResponse",
        "description": "Response containing configuration settings.\n\nAttributes:\n    version: Configuration schema version for compatibility\n    metadata: Metadata about the configuration\n    values: Configuration settings"
      },
      "ConfigUpdate": {
        "properties": {
          "conversation_length": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Conversation Length",
            "description": "Number of conversation messages to retain"
          },
          "detail_length": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Detail Length",
            "description": "Maximum length of detailed conversation history"
          },
          "max_learnings_history": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Learnings History",
            "description": "Maximum number of learning entries to retain"
          },
          "hosting": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hosting",
            "description": "AI model hosting provider"
          },
          "model_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Name",
            "description": "Name of the AI model to use"
          },
          "auto_save_conversation": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auto Save Conversation",
            "description": "Whether to automatically save the conversation"
          }
        },
        "type": "object",
        "title": "ConfigUpdate",
        "description": "Data for updating configuration settings.\n\nAttributes:\n    conversation_length: Number of conversation messages to retain\n    detail_length: Maximum length of detailed conversation history\n    max_learnings_history: Maximum number of learning entries to retain\n    hosting: AI model hosting provider\n    model_name: Name of the AI model to use\n    auto_save_conversation: Whether to automatically save the conversation"
      },
      "ConversationRecord": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "default": ""
          },
          "role": {
            "$ref": "#/components/schemas/ConversationRole",
            "default": "assistant"
          },
          "should_summarize": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Should Summarize",
            "default": true
          },
          "ephemeral": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ephemeral",
            "default": false
          },
          "ephemeral_steps": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ephemeral Steps",
            "default": 0
          },
          "summarized": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Summarized",
            "default": false
          },
          "is_system_prompt": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is System Prompt",
            "default": false
          },
          "timestamp": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timestamp"
          },
          "files": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Files"
          },
          "should_cache": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Should Cache",
            "default": false
          }
        },
        "type": "object",
        "title": "ConversationRecord",
        "description": "A record of a conversation with an AI model.\n\nAttributes:\n    role (ConversationRole): The role of the sender of the message\n    content (str): The content of the message\n    should_summarize (bool): Whether this message should be summarized\n    ephemeral (bool): Whether this message is temporary/ephemeral\n    summarized (bool): Whether this message has been summarized\n    is_system_prompt (bool): Whether this message is a system prompt\n    timestamp (datetime): When this message was created\n    files (List[str]): The files that were created or modified during the code execution\n\nMethods:\n    to_dict(): Convert the record to a dictionary format\n    from_dict(data): Create a ConversationRecord from a dictionary"
      },
      "ConversationRole": {
        "type": "string",
        "enum": [
          "system",
          "user",
          "assistant",
          "human",
          "ai",
          "function",
          "tool",
          "chat"
        ],
        "title": "ConversationRole",
        "description": "Enum representing the different roles in a conversation with an AI model.\n\nUsed to track who sent each message in the conversation history.\nMaps to the standard roles used by LangChain message types."
      },
      "CredentialListResult": {
        "properties": {
          "keys": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Keys",
            "description": "List of credential keys"
          }
        },
        "type": "object",
        "required": [
          "keys"
        ],
        "title": "CredentialListResult",
        "description": "Result containing a list of credential keys.\n\nAttributes:\n    keys: List of credential keys"
      },
      "CredentialUpdate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The credential key to update"
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The new value for the credential"
          }
        },
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "CredentialUpdate",
        "description": "Data for updating a credential.\n\nAttributes:\n    key: The credential key to update\n    value: The new value for the credential"
      },
      "ExecutionType": {
        "type": "string",
        "enum": [
          "plan",
          "pre_action",
          "action",
          "reflection",
          "response",
          "security_check",
          "classification",
          "system",
          "info",
          "user_input",
          "delegate",
          "none"
        ],
        "title": "ExecutionType",
        "description": "Enum representing the different types of execution in a conversation workflow.\n\nUsed to track the execution phase within the agent's thought process:\n- PLAN: Initial planning phase where the agent outlines its approach\n- PRE_ACTION: The agent is generating a response for the action interpreter to\n  review and produce a structured system message.\n- ACTION: Execution of specific actions like running code or accessing resources\n- REFLECTION: Analysis and evaluation of previous actions and their results\n- RESPONSE: Final response generation based on the execution results\n- SECURITY_CHECK: Security check phase where the agent checks the safety of the code\n- CLASSIFICATION: Classification phase where the agent classifies the user's request\n- SYSTEM: An automatic static response from the system, such as an action cancellation.\n- INFO: An informational message from the system, such as an agent import."
      },
      "ExecutionVariable": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The key of the execution variable."
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The value of the execution variable."
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of the execution variable."
          }
        },
        "type": "object",
        "required": [
          "key",
          "value",
          "type"
        ],
        "title": "ExecutionVariable",
        "description": "A single execution variable."
      },
      "ExecutionVariablesResponse": {
        "properties": {
          "execution_variables": {
            "items": {
              "$ref": "#/components/schemas/ExecutionVariable"
            },
            "type": "array",
            "title": "Execution Variables",
            "description": "A list of execution variables."
          }
        },
        "type": "object",
        "required": [
          "execution_variables"
        ],
        "title": "ExecutionVariablesResponse",
        "description": "Response model for a list of execution variables."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheckResponse": {
        "properties": {
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Version of the Local Operator"
          }
        },
        "type": "object",
        "required": [
          "version"
        ],
        "title": "HealthCheckResponse",
        "description": "Response for health check endpoint.\n\nAttributes:\n    version: Version of the Local Operator"
      },
      "JobContextRecord": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/ConversationRole"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "files": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "title": "JobContextRecord",
        "description": "Model representing a record of a job context."
      },
      "JobResult": {
        "properties": {
          "response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response"
          },
          "context": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/JobContextRecord"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context"
          },
          "stats": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "integer"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stats"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "JobResult",
        "description": "Model representing the result of a completed job."
      },
      "JobResultSchema": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the job"
          },
          "agent_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Id",
            "description": "ID of the agent associated with the job"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus",
            "description": "Current status of the job"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "The prompt that was submitted for processing"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model used for processing"
          },
          "hosting": {
            "type": "string",
            "title": "Hosting",
            "description": "The hosting service used"
          },
          "created_at": {
            "type": "number",
            "title": "Created At",
            "description": "Timestamp when the job was created"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "Timestamp when job processing started"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At",
            "description": "Timestamp when job completed"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/JobResult"
              },
              {
                "type": "null"
              }
            ],
            "description": "Result data containing response, context, and stats"
          }
        },
        "type": "object",
        "required": [
          "id",
          "status",
          "prompt",
          "model",
          "hosting",
          "created_at"
        ],
        "title": "JobResultSchema",
        "description": "Schema for job result data.\n\nAttributes:\n    id: Unique identifier for the job\n    agent_id: Optional ID of the agent associated with the job\n    status: Current status of the job\n    prompt: The prompt that was submitted for processing\n    model: The model used for processing\n    hosting: The hosting service used\n    created_at: Timestamp when the job was created\n    started_at: Optional timestamp when the job processing started\n    completed_at: Optional timestamp when the job completed\n    result: Optional result data containing response, context, and stats"
      },
      "JobStatus": {
        "type": "string",
        "enum": [
          "pending",
          "processing",
          "completed",
          "failed",
          "cancelled"
        ],
        "title": "JobStatus",
        "description": "Enum representing the possible states of a job."
      },
      "ModelEntry": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the model"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Display name for the model"
          },
          "provider": {
            "type": "string",
            "title": "Provider",
            "description": "The provider of the model"
          },
          "info": {
            "$ref": "#/components/schemas/ModelInfo",
            "description": "Detailed information about the model"
          }
        },
        "type": "object",
        "required": [
          "id",
          "provider",
          "info"
        ],
        "title": "ModelEntry",
        "description": "A single model entry.\n\nAttributes:\n    id: Unique identifier for the model\n    name: Optional display name for the model\n    provider: The provider of the model\n    info: Detailed information about the model",
        "example": {
          "id": "claude-3-opus-20240229",
          "info": {
            "context_window": 200000,
            "description": "Most powerful Claude model for highly complex tasks",
            "input_price": 15000.0,
            "max_tokens": 200000,
            "output_price": 75000.0,
            "supports_images": true,
            "supports_prompt_cache": false
          },
          "provider": "anthropic"
        }
      },
      "ModelInfo": {
        "properties": {
          "input_price": {
            "type": "number",
            "title": "Input Price",
            "default": 0.0
          },
          "output_price": {
            "type": "number",
            "title": "Output Price",
            "default": 0.0
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens"
          },
          "context_window": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context Window"
          },
          "supports_images": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Supports Images"
          },
          "supports_prompt_cache": {
            "type": "boolean",
            "title": "Supports Prompt Cache",
            "default": false
          },
          "cache_writes_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cache Writes Price"
          },
          "cache_reads_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cache Reads Price"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the model"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the model"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Display name for the model"
          },
          "recommended": {
            "type": "boolean",
            "title": "Recommended",
            "description": "Whether the model is recommended for use in Local Operator. This is determined based on community usage and feedback.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "description",
          "id",
          "name"
        ],
        "title": "ModelInfo",
        "description": "Represents the pricing information for a given model.\n\nAttributes:\n    input_price (float): Cost per million input tokens.\n    output_price (float): Cost per million output tokens.\n    max_tokens (Optional[int]): Maximum number of tokens supported by the model.\n    context_window (Optional[int]): Context window size of the model.\n    supports_images (Optional[bool]): Whether the model supports images.\n    supports_prompt_cache (bool): Whether the model supports prompt caching.\n    cache_writes_price (Optional[float]): Cost per million tokens for cache writes.\n    cache_reads_price (Optional[float]): Cost per million tokens for cache reads.\n    description (Optional[str]): Description of the model.\n    recommended (Optional[bool]): Whether the model is recommended for use in Local\n    Operator.  This is determined based on community usage and feedback."
      },
      "ModelListQuerySort": {
        "type": "string",
        "enum": [
          "id",
          "name",
          "provider",
          "recommended"
        ],
        "title": "ModelListQuerySort",
        "description": "Sorting options for model listings."
      },
      "ModelListResponse": {
        "properties": {
          "models": {
            "items": {
              "$ref": "#/components/schemas/ModelEntry"
            },
            "type": "array",
            "title": "Models",
            "description": "List of model entries"
          }
        },
        "type": "object",
        "required": [
          "models"
        ],
        "title": "ModelListResponse",
        "description": "Response for listing models.\n\nAttributes:\n    models: List of model entries",
        "example": {
          "models": [
            {
              "id": "claude-3-opus-20240229",
              "info": {
                "context_window": 200000,
                "description": "Most powerful Claude model for highly complex tasks",
                "input_price": 15000.0,
                "max_tokens": 200000,
                "output_price": 75000.0,
                "supports_images": true,
                "supports_prompt_cache": false
              },
              "provider": "anthropic"
            },
            {
              "id": "gpt-4o",
              "info": {
                "context_window": 128000,
                "description": "OpenAI's most advanced multimodal model",
                "input_price": 5000.0,
                "max_tokens": 128000,
                "output_price": 15000.0,
                "supports_images": true,
                "supports_prompt_cache": false
              },
              "name": "GPT-4o",
              "provider": "openai"
            }
          ]
        }
      },
      "ProcessResponseStatus": {
        "type": "string",
        "enum": [
          "success",
          "cancelled",
          "error",
          "interrupted",
          "confirmation_required",
          "in_progress",
          "none"
        ],
        "title": "ProcessResponseStatus",
        "description": "Status codes for process_response results."
      },
      "ProviderDetail": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the provider"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Display name for the provider"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the provider"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL to the provider's platform"
          },
          "requiredCredentials": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Requiredcredentials",
            "description": "List of required credential keys"
          },
          "recommended": {
            "type": "boolean",
            "title": "Recommended",
            "description": "Whether the provider is recommended for use in Local Operator",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "url",
          "requiredCredentials"
        ],
        "title": "ProviderDetail",
        "description": "Model for provider details.\n\nAttributes:\n    id: Unique identifier for the provider\n    name: Display name for the provider\n    description: Description of the provider\n    url: URL to the provider's platform\n    requiredCredentials: List of required credential keys"
      },
      "ProviderListResponse": {
        "properties": {
          "providers": {
            "items": {
              "$ref": "#/components/schemas/ProviderDetail"
            },
            "type": "array",
            "title": "Providers",
            "description": "List of provider details"
          }
        },
        "type": "object",
        "required": [
          "providers"
        ],
        "title": "ProviderListResponse",
        "description": "Response for listing providers.\n\nAttributes:\n    providers: List of provider details",
        "example": {
          "providers": [
            {
              "description": "OpenAI's API provides access to GPT-4o and other models",
              "id": "openai",
              "name": "OpenAI",
              "requiredCredentials": [
                "OPENAI_API_KEY"
              ],
              "url": "https://platform.openai.com/"
            },
            {
              "description": "Anthropic's Claude models for safe, helpful AI assistants",
              "id": "anthropic",
              "name": "Anthropic",
              "requiredCredentials": [
                "ANTHROPIC_API_KEY"
              ],
              "url": "https://www.anthropic.com/"
            }
          ]
        }
      },
      "RadientTranscriptionResponseData": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "duration": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "text",
          "provider",
          "status"
        ],
        "title": "RadientTranscriptionResponseData",
        "description": "Data part of the response when creating a transcription.\n\nAttributes:\n    text (str): The transcribed text from the audio.\n    provider (str): The name of the provider that performed the transcription.\n    status (str): The status of the transcription request.\n    error (Optional[str]): An error message if the transcription failed.\n    duration (Optional[float]): The duration of the transcribed audio in seconds."
      },
      "ScheduleCreateRequest": {
        "properties": {
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "The prompt for the scheduled task."
          },
          "interval": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Interval",
            "description": "The interval value for the schedule (e.g., 5 for every 5 minutes)."
          },
          "unit": {
            "$ref": "#/components/schemas/ScheduleUnit",
            "description": "The unit for the interval (MINUTES, HOURS, DAYS)."
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "description": "Whether the schedule is active upon creation.",
            "default": true
          },
          "one_time": {
            "type": "boolean",
            "title": "One Time",
            "description": "Whether this is a one-time schedule.",
            "default": false
          },
          "start_time_utc": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time Utc",
            "description": "Optional UTC start time for the schedule."
          },
          "end_time_utc": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time Utc",
            "description": "Optional UTC end time for the schedule."
          }
        },
        "type": "object",
        "required": [
          "prompt",
          "interval",
          "unit"
        ],
        "title": "ScheduleCreateRequest",
        "description": "Request model for creating a new schedule.",
        "examples": [
          {
            "interval": 1,
            "is_active": true,
            "name": "Weekly Newsletter",
            "one_time": false,
            "prompt": "Send weekly newsletter",
            "start_time_utc": "2024-06-01T09:00:00Z",
            "unit": "DAYS"
          }
        ]
      },
      "ScheduleListResponse": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of schedules."
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number."
          },
          "per_page": {
            "type": "integer",
            "title": "Per Page",
            "description": "Number of schedules per page."
          },
          "schedules": {
            "items": {
              "$ref": "#/components/schemas/ScheduleResponse"
            },
            "type": "array",
            "title": "Schedules",
            "description": "List of schedules for the current page."
          }
        },
        "type": "object",
        "required": [
          "total",
          "page",
          "per_page",
          "schedules"
        ],
        "title": "ScheduleListResponse",
        "description": "Response model for a paginated list of schedules.",
        "examples": [
          {
            "page": 1,
            "per_page": 10,
            "schedules": [
              {
                "agent_id": "b2c3d4e5-f6a7-8901-2345-67890abcdef0",
                "created_at": "2024-05-15T10:00:00Z",
                "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                "interval": 1,
                "is_active": true,
                "one_time": false,
                "prompt": "Run daily report",
                "unit": "DAYS"
              }
            ],
            "total": 100
          }
        ]
      },
      "ScheduleResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "agent_id": {
            "type": "string",
            "format": "uuid",
            "title": "Agent Id"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "interval": {
            "type": "integer",
            "title": "Interval"
          },
          "unit": {
            "$ref": "#/components/schemas/ScheduleUnit"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "one_time": {
            "type": "boolean",
            "title": "One Time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "last_run_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Run At"
          },
          "start_time_utc": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time Utc"
          },
          "end_time_utc": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time Utc"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "id",
          "agent_id",
          "prompt",
          "interval",
          "unit",
          "is_active",
          "one_time",
          "created_at"
        ],
        "title": "ScheduleResponse",
        "description": "Response model for a schedule.",
        "examples": [
          {
            "agent_id": "b2c3d4e5-f6a7-8901-2345-67890abcdef0",
            "created_at": "2024-05-15T10:00:00Z",
            "description": "Generates the daily sales report.",
            "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
            "interval": 1,
            "is_active": true,
            "last_run_at": "2024-05-14T10:00:00Z",
            "name": "Daily Report Generation",
            "one_time": false,
            "prompt": "Run daily report",
            "start_time_utc": "2024-01-01T00:00:00Z",
            "unit": "DAYS"
          }
        ]
      },
      "ScheduleUnit": {
        "type": "string",
        "enum": [
          "minutes",
          "hours",
          "days"
        ],
        "title": "ScheduleUnit",
        "description": "Enum representing the units for a schedule interval."
      },
      "ScheduleUpdateRequest": {
        "properties": {
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "description": "The prompt for the scheduled task."
          },
          "interval": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Interval",
            "description": "The interval value for the schedule."
          },
          "unit": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ScheduleUnit"
              },
              {
                "type": "null"
              }
            ],
            "description": "The unit for the interval."
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active",
            "description": "Whether the schedule is active."
          },
          "one_time": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "One Time",
            "description": "Whether this is a one-time schedule."
          },
          "start_time_utc": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Time Utc",
            "description": "Optional UTC start time for the schedule."
          },
          "end_time_utc": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Time Utc",
            "description": "Optional UTC end time for the schedule."
          }
        },
        "type": "object",
        "title": "ScheduleUpdateRequest",
        "description": "Request model for updating an existing schedule. All fields are optional.",
        "examples": [
          {
            "interval": 8,
            "is_active": false,
            "prompt": "Run nightly backup",
            "unit": "HOURS"
          }
        ]
      },
      "SpeechRequest": {
        "properties": {
          "input": {
            "type": "string",
            "title": "Input",
            "description": "The text to generate speech from."
          },
          "instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instructions",
            "description": "Additional prompt with instructions for the speech generation."
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model to use for generation."
          },
          "voice": {
            "type": "string",
            "title": "Voice",
            "description": "The voice to use for generation."
          },
          "response_format": {
            "type": "string",
            "title": "Response Format",
            "description": "The format of the audio response. Default: \"mp3\".",
            "default": "mp3"
          },
          "speed": {
            "type": "number",
            "title": "Speed",
            "description": "The speed of the speech. Default: 1.0.",
            "default": 1.0
          },
          "provider": {
            "type": "string",
            "title": "Provider",
            "description": "The provider to use for generation. Default: \"openai\".",
            "default": "openai"
          }
        },
        "type": "object",
        "required": [
          "input",
          "model",
          "voice"
        ],
        "title": "SpeechRequest",
        "description": "Request body for speech generation endpoint.\n\nAttributes:\n    input: The text to generate speech from.\n    instructions: Additional prompt with instructions for the speech generation.\n    model: The model to use for generation.\n    voice: The voice to use for generation.\n    response_format: The format of the audio response. Default: \"mp3\".\n    speed: The speed of the speech. Default: 1.0.\n    provider: The provider to use for generation. Default: \"openai\"."
      },
      "SystemPromptResponse": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "The content of the system prompt"
          },
          "last_modified": {
            "type": "string",
            "title": "Last Modified",
            "description": "Timestamp when the system prompt was last modified"
          }
        },
        "type": "object",
        "required": [
          "content",
          "last_modified"
        ],
        "title": "SystemPromptResponse",
        "description": "Response containing the system prompt content.\n\nAttributes:\n    content: The content of the system prompt\n    last_modified: Timestamp when the system prompt was last modified"
      },
      "SystemPromptUpdate": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "The new content for the system prompt"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "SystemPromptUpdate",
        "description": "Data for updating the system prompt.\n\nAttributes:\n    content: The new content for the system prompt"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "Health",
      "description": "Health check endpoints"
    },
    {
      "name": "Chat",
      "description": "Chat generation endpoints"
    },
    {
      "name": "Agents",
      "description": "Agent management endpoints"
    },
    {
      "name": "Jobs",
      "description": "Job management endpoints"
    },
    {
      "name": "Configuration",
      "description": "Configuration management endpoints"
    },
    {
      "name": "Credentials",
      "description": "Credential management endpoints"
    },
    {
      "name": "Models",
      "description": "Model management endpoints"
    },
    {
      "name": "Schedules",
      "description": "Schedule management endpoints"
    },
    {
      "name": "Transcription",
      "description": "Audio transcription endpoints"
    },
    {
      "name": "Static",
      "description": "Static file hosting endpoints"
    }
  ]
}